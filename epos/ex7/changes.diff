Index: include/system/config.h
===================================================================
--- include/system/config.h	(revision 3753)
+++ include/system/config.h	(working copy)
@@ -7,15 +7,15 @@
 // ARCHITECTURE, MACHINE, AND APPLICATION SELECTION
 // This section is generated automatically from makedefs by $EPOS/etc/makefile
 //============================================================================
-#define MODE xxx
-#define ARCH xxx
-#define MACH xxx
-#define MMOD xxx
-#define APPL xxx
-#define __mode_xxx__
-#define __arch_xxx__
-#define __mach_xxx__
-#define __mmod_xxx__
+#define MODE library
+#define ARCH ia32
+#define MACH pc
+#define MMOD legacy
+#define APPL philosophers_dinner
+#define __mode_library__
+#define __arch_ia32__
+#define __mach_pc__
+#define __mmod_legacy__
 
 #if defined (__arch_avr__) || defined (__mmod_lm3s811__)
 #define __no_networking__
Index: include/system/types.h
===================================================================
--- include/system/types.h	(revision 3753)
+++ include/system/types.h	(working copy)
@@ -81,6 +81,9 @@
 class System;
 class Application;
 
+template<typename>
+class Scheduler;
+
 class Thread;
 
 class Address_Space;
Index: include/thread.h
===================================================================
--- include/thread.h	(revision 3753)
+++ include/thread.h	(working copy)
@@ -7,6 +7,7 @@
 #include <utility/handler.h>
 #include <cpu.h>
 #include <machine.h>
+#include <scheduler.h>
 
 extern "C" { void __exit(); }
 
@@ -60,8 +61,12 @@
         unsigned int stack_size;
     };
 
+
+    // Thread Criterion for scheduling
+    typedef Priority Criterion;
+
     // Thread Queue
-    typedef Ordered_Queue<Thread, Priority> Queue;
+    typedef Ordered_Queue<Thread, Criterion, Scheduler<Thread>::Element> Queue;
 
 public:
     template<typename ... Tn>
@@ -84,11 +89,13 @@
     static void yield();
     static void exit(int status = 0);
 
+    Queue::Element * link() { return &_link; }
+
 protected:
     void constructor_prolog(unsigned int stack_size);
     void constructor_epilog(const Log_Addr & entry, unsigned int stack_size);
 
-    static Thread * volatile running() { return _running; }
+    static Thread * volatile running() { return _scheduler.chosen(); }
 
     static void lock() { CPU::int_disable(); }
     static void unlock() { CPU::int_enable(); }
@@ -120,9 +127,10 @@
     static Scheduler_Timer * _timer;
 
 private:
-    static Thread * volatile _running;
-    static Queue _ready;
-    static Queue _suspended;
+    //static Thread * volatile _running;
+    //static Queue _ready;
+    //static Queue _suspended;
+    static Scheduler<Thread> _scheduler;
 };
 
 
Index: src/abstraction/semaphore_test.cc
===================================================================
--- src/abstraction/semaphore_test.cc	(revision 3753)
+++ src/abstraction/semaphore_test.cc	(working copy)
@@ -9,7 +9,7 @@
 
 using namespace EPOS;
 
-const int iterations = 10;
+const int iterations = 3;
 
 Mutex table;
 
Index: src/abstraction/thread.cc
===================================================================
--- src/abstraction/thread.cc	(revision 3753)
+++ src/abstraction/thread.cc	(working copy)
@@ -15,9 +15,10 @@
 volatile unsigned int Thread::_thread_count;
 Scheduler_Timer * Thread::_timer;
 
-Thread* volatile Thread::_running;
-Thread::Queue Thread::_ready;
-Thread::Queue Thread::_suspended;
+//Thread* volatile Thread::_running;
+//Thread::Queue Thread::_ready;
+//Thread::Queue Thread::_suspended;
+Scheduler<Thread> Thread::_scheduler;
 
 // Methods
 void Thread::constructor_prolog(unsigned int stack_size)
@@ -41,11 +42,20 @@
                     << "," << *_context << "}) => " << this << endl;
 
     switch(_state) {
-        case RUNNING: break;
-        case READY: _ready.insert(&_link); break;
-        case SUSPENDED: _suspended.insert(&_link); break;
-        case WAITING: break;
-        case FINISHING: break;
+        case RUNNING:
+            _scheduler.insert(this);
+            break;
+        case READY:
+            //_ready.insert(&_link);
+            _scheduler.insert(this);
+            break;
+        case SUSPENDED:
+            //_suspended.insert(&_link);
+            break;
+        case WAITING:
+            break;
+        case FINISHING:
+            break;
     }
 
     if(preemptive && (_state == READY) && (_link.rank() != IDLE))
@@ -74,15 +84,20 @@
         exit(-1);
         break;
     case READY:
-        _ready.remove(this);
+        //_ready.remove(this);
+        _scheduler.remove(this);
         _thread_count--;
         break;
     case SUSPENDED:
-        _suspended.remove(this);
+        //_suspended.remove(this);
+        _scheduler.resume(this);
+        _scheduler.remove(this);
         _thread_count--;
         break;
     case WAITING:
         _waiting->remove(this);
+        _scheduler.resume(this);
+        _scheduler.remove(this);
         _thread_count--;
         break;
     case FINISHING: // Already called exit()
@@ -126,15 +141,16 @@
 
     db<Thread>(TRC) << "Thread::pass(this=" << this << ")" << endl;
 
-    Thread * prev = _running;
-    prev->_state = READY;
-    _ready.insert(&prev->_link);
+    Thread * prev = running();
+    // prev->_state = READY; // dispatch() already setting states
+    //_ready.insert(&prev->_link);
+    // next->_state = RUNNING; // dispatch() already setting states
 
-    _ready.remove(this);
-    _state = RUNNING;
-    _running = this;
+    //_ready.remove(this);
+    //_state = RUNNING;
+    //_running = this;
 
-    dispatch(prev, this);
+    dispatch(prev, _scheduler.choose(this));
 
     unlock();
 }
@@ -144,21 +160,21 @@
 {
     lock();
 
-    db<Thread>(TRC) << "Thread::suspend(this=" << this << ")" << endl;
+    db<Thread>(TRC) << "Thread::suspend(this=" << this << ", running="<< running() << ")" << endl;
 
-    if(_running != this)
-        _ready.remove(this);
+    //if(running() != this)
+        //_ready.remove(this);
+    //_suspended.insert(&_link); // TODO: remove suspended queue?
 
+    _scheduler.suspend(this);  // Might trigger a scheduler.choose() (if this == running)
     _state = SUSPENDED;
-    _suspended.insert(&_link);
 
-    if(_running == this) {
-        _running = _ready.remove()->object();
-        _running->_state = RUNNING;
+    //if(running() == this) {
+        //_running = _ready.remove()->object();
+        //_running->_state = RUNNING;
+        dispatch(this, _scheduler.chosen());
+    //}
 
-        dispatch(this, _running);
-    }
-
     unlock();
 }
 
@@ -169,9 +185,12 @@
 
     db<Thread>(TRC) << "Thread::resume(this=" << this << ")" << endl;
 
-   _suspended.remove(this);
-   _state = READY;
-   _ready.insert(&_link);
+   //_suspended.remove(this);
+   //_ready.insert(&_link);
+   if (_state == SUSPENDED) {
+       _state = READY;
+       _scheduler.resume(this);
+   }
 
    unlock();
 }
@@ -182,17 +201,19 @@
 {
     lock();
 
-    db<Thread>(TRC) << "Thread::yield(running=" << _running << ")" << endl;
+    db<Thread>(TRC) << "Thread::yield(running=" << running() << ")" << endl;
 
-    Thread * prev = _running;
-    prev->_state = READY;
-    _ready.insert(&prev->_link);
+    //prev->_state = READY;
+    //_ready.insert(&prev->_link);
 
-    _running = _ready.remove()->object();
-    _running->_state = RUNNING;
+    //next->_state = RUNNING;
 
-    dispatch(prev, _running);
+    //_running = _ready.remove()->object();
+    //_running->_state = RUNNING;
 
+    Thread * prev = running();
+    dispatch(prev, _scheduler.choose());
+
     unlock();
 }
 
@@ -203,9 +224,10 @@
 
     db<Thread>(TRC) << "Thread::exit(status=" << status << ") [running=" << running() << "]" << endl;
 
-    Thread * prev = _running;
+    Thread * prev = running();
+    *reinterpret_cast<int *>(prev->_stack) = status;
     prev->_state = FINISHING;
-    *reinterpret_cast<int *>(prev->_stack) = status;
+    _scheduler.remove(prev);
 
     _thread_count--;
 
@@ -216,11 +238,10 @@
 
     lock();
 
-    _running = _ready.remove()->object();
-    _running->_state = RUNNING;
+    //_running = _ready.remove()->object();
+    //_running->_state = RUNNING;
+    dispatch(prev, _scheduler.choose());
 
-    dispatch(prev, _running);
-
     unlock();
 }
 
@@ -232,15 +253,15 @@
     assert(locked());
 
     Thread * prev = running();
+    _scheduler.suspend(prev); // Triggers a scheduler.choose()
     prev->_state = WAITING;
     prev->_waiting = q;
     q->insert(&prev->_link);
 
-    _running = _ready.remove()->object();
-    _running->_state = RUNNING;
+    //_running = _ready.remove()->object();
+    //_running->_state = RUNNING;
+    dispatch(prev, _scheduler.chosen());
 
-    dispatch(prev, _running);
-
     unlock();
 }
 
@@ -256,7 +277,8 @@
         Thread * t = q->remove()->object();
         t->_state = READY;
         t->_waiting = 0;
-        _ready.insert(&t->_link);
+        //_ready.insert(&t->_link);
+        _scheduler.resume(t);
     }
 
     unlock();
@@ -277,7 +299,8 @@
         Thread * t = q->remove()->object();
         t->_state = READY;
         t->_waiting = 0;
-        _ready.insert(&t->_link);
+        //_ready.insert(&t->_link);
+        _scheduler.resume(t);
     }
 
     unlock();
@@ -320,7 +343,7 @@
 int Thread::idle()
 {
     while(_thread_count > 1) { // someone else besides idle
-        if(Traits<Thread>::trace_idle)
+        //if(Traits<Thread>::trace_idle)
             db<Thread>(TRC) << "Thread::idle(this=" << running() << ")" << endl;
 
         CPU::int_enable();
Index: src/init/init_first.cc
===================================================================
--- src/init/init_first.cc	(revision 3753)
+++ src/init/init_first.cc	(working copy)
@@ -28,7 +28,7 @@
         // If EPOS is not a kernel, then adjust the application entry point to __epos_app_entry,
         // which will directly call main(). In this case, _init will have already been called,
         // before Init_Application, to construct main()'s global objects.
-        Thread::_running = new (SYSTEM) Thread(Thread::Configuration(Thread::RUNNING, Thread::MAIN), reinterpret_cast<int (*)()>(__epos_app_entry));
+        new (SYSTEM) Thread(Thread::Configuration(Thread::RUNNING, Thread::MAIN), reinterpret_cast<int (*)()>(__epos_app_entry));
 
         // Idle thread creation must succeed main, thus avoiding implicit rescheduling
         new (SYSTEM) Thread(Thread::Configuration(Thread::READY, Thread::IDLE), &Thread::idle);
