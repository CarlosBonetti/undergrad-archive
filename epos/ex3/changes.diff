Index: include/system/traits.h
===================================================================
--- include/system/traits.h	(revision 3712)
+++ include/system/traits.h	(working copy)
@@ -38,8 +38,8 @@
 {
     static const bool error   = true;
     static const bool warning = true;
-    static const bool info    = false;
-    static const bool trace   = false;
+    static const bool info    = true;
+    static const bool trace   = true;
 };

 template<> struct Traits<Lists>: public Traits<void>
Index: include/thread.h
===================================================================
--- include/thread.h	(revision 3712)
+++ include/thread.h	(working copy)
@@ -45,13 +45,16 @@
     enum {
         HIGH = 0,
         NORMAL = 15,
-        LOW = 31
+        LOW = 31,
+        IDLE = 63
     };

     // Thread Configuration
     struct Configuration {
         Configuration(const State & s = READY, const Priority & p = NORMAL, unsigned int ss = STACK_SIZE)
-        : state(s), priority(p), stack_size(ss) {}
+        : state(s), priority(p), stack_size(ss) {
+            assert(p <= IDLE);
+        }

         State state;
         Priority priority;
@@ -86,6 +89,10 @@
     void constructor_prolog(unsigned int stack_size);
     void constructor_epilog(const Log_Addr & entry, unsigned int stack_size);

+    void wakeup();
+    void wakeup_joiners();
+
+    static void wait(Queue * waiting_queue);
     static Thread * volatile running() { return _running; }

     static void lock() { CPU::int_disable(); }
@@ -101,6 +108,7 @@

 private:
     static void init();
+    static void init_idle();

 protected:
     char * _stack;
@@ -108,6 +116,9 @@
     volatile State _state;
     Queue::Element _link;

+    Queue _joining;
+    Thread * _joined;
+
     static Scheduler_Timer * _timer;

 private:
@@ -114,6 +125,7 @@
     static Thread * volatile _running;
     static Queue _ready;
     static Queue _suspended;
+    static unsigned int _thread_count;
 };

Index: src/abstraction/thread.cc
===================================================================
--- src/abstraction/thread.cc	(revision 3712)
+++ src/abstraction/thread.cc	(working copy)
@@ -17,6 +17,7 @@
 Thread* volatile Thread::_running;
 Thread::Queue Thread::_ready;
 Thread::Queue Thread::_suspended;
+unsigned int Thread::_thread_count = 0;

 // Methods
 void Thread::constructor_prolog(unsigned int stack_size)
@@ -29,9 +30,12 @@

 void Thread::constructor_epilog(const Log_Addr & entry, unsigned int stack_size)
 {
+    _thread_count++;
+
     db<Thread>(TRC) << "Thread(entry=" << entry
                     << ",state=" << _state
                     << ",priority=" << _link.rank()
+                    << ",thread_count=" << _thread_count
                     << ",stack={b=" << reinterpret_cast<void *>(_stack)
                     << ",s=" << stack_size
                     << "},context={b=" << _context
@@ -54,10 +58,21 @@
     db<Thread>(TRC) << "~Thread(this=" << this
                     << ",state=" << _state
                     << ",priority=" << _link.rank()
+                    << ",thread_count=" << _thread_count
                     << ",stack={b=" << reinterpret_cast<void *>(_stack)
                     << ",context={b=" << _context
                     << "," << *_context << "})" << endl;

+    // No Threads should be waiting for a deleted one
+    assert(_joining.empty());
+
+    // If deleted thread is joining another one, remove it from the list of that thread
+    if (_joined)
+        _joined->_joining.remove(&_link);
+
+    if (_state != FINISHING)
+        _thread_count--;
+
     _ready.remove(this);
     _suspended.remove(this);

@@ -73,11 +88,18 @@

     db<Thread>(TRC) << "Thread::join(this=" << this << ",state=" << _state << ")" << endl;

-    while(_state != FINISHING)
-        yield(); // implicit unlock()
+    // A Thread should not join itself
+    assert(this != _running);

-    unlock();
+    // Avoid cyclic joining (transitive cyclic joining untreated)
+    assert(this->_joined != _running);

+    if(_state != FINISHING) {
+        _running->_joined = this;
+        Thread::wait(&_joining); // implicit unlock()
+    } else
+        unlock();
+
     return *reinterpret_cast<int *>(_stack);
 }

@@ -114,13 +136,15 @@
     _state = SUSPENDED;
     _suspended.insert(&_link);

-    if((_running == this) && !_ready.empty()) {
+    if((_running == this)
+        //&& !_ready.empty()
+    ) {
         _running = _ready.remove()->object();
         _running->_state = RUNNING;

         dispatch(this, _running);
-    } else
-        idle(); // implicit unlock()
+    } //else
+        //idle(); // implicit unlock()

     unlock();
 }
@@ -140,6 +164,36 @@
 }


+void Thread::wakeup()
+{
+    lock();
+
+    db<Thread>(TRC) << "Thread::wakeup(this=" << this << ")" << endl;
+
+   _state = READY;
+   _ready.insert(&_link);
+
+   unlock();
+}
+
+
+void Thread::wakeup_joiners()
+{
+    lock();
+
+    db<Thread>(TRC) << "Thread::wakeup_joiners(this=" << this << ")" << endl;
+
+    Thread * joiner;
+
+    while(!_joining.empty()) {
+        joiner = _joining.remove()->object();
+        joiner->_joined = 0;
+        joiner->wakeup(); // implicit unlock()
+    }
+
+    unlock();
+}
+
 // Class methods
 void Thread::yield()
 {
@@ -147,7 +201,7 @@

     db<Thread>(TRC) << "Thread::yield(running=" << _running << ")" << endl;

-    if(!_ready.empty()) {
+    //if(!_ready.empty()) {
         Thread * prev = _running;
         prev->_state = READY;
         _ready.insert(&prev->_link);
@@ -156,13 +210,35 @@
         _running->_state = RUNNING;

         dispatch(prev, _running);
-    } else
-        idle();
+    //} else
+        //idle();

     unlock();
 }


+void Thread::wait(Queue * waiting_queue)
+{
+    lock();
+
+    db<Thread>(TRC) << "Thread::wait(running=" << _running << ")" << endl;
+
+    //if(!_ready.empty()) {
+        Thread * prev = _running;
+        prev->_state = WAITING;
+        waiting_queue->insert(&prev->_link);
+
+        _running = _ready.remove()->object();
+        _running->_state = RUNNING;
+
+        dispatch(prev, _running);
+    //} else
+        //idle();
+
+    unlock();
+}
+
+
 void Thread::exit(int status)
 {
     lock();
@@ -169,30 +245,35 @@

     db<Thread>(TRC) << "Thread::exit(status=" << status << ") [running=" << running() << "]" << endl;

-    while(_ready.empty() && !_suspended.empty())
-        idle(); // implicit unlock();
+    *reinterpret_cast<int *>(_running->_stack) = status;
+    _running->wakeup_joiners(); // implicit unlock();

     lock();

-    if(!_ready.empty()) {
+    //while(_ready.empty() && !_suspended.empty())
+        //idle(); // implicit unlock();
+
+    //lock();
+
+    //if(!_ready.empty()) {
         Thread * prev = _running;
         prev->_state = FINISHING;
-        *reinterpret_cast<int *>(prev->_stack) = status;
+        _thread_count--;

         _running = _ready.remove()->object();
         _running->_state = RUNNING;

         dispatch(prev, _running);
-    } else {
-        db<Thread>(WRN) << "The last thread in the system has exited!" << endl;
-        if(reboot) {
-            db<Thread>(WRN) << "Rebooting the machine ..." << endl;
-            Machine::reboot();
-        } else {
-            db<Thread>(WRN) << "Halting the CPU ..." << endl;
-            CPU::halt();
-        }
-    }
+    //} else {
+        //db<Thread>(WRN) << "The last thread in the system has exited!" << endl;
+        //if(reboot) {
+            //db<Thread>(WRN) << "Rebooting the machine ..." << endl;
+            //Machine::reboot();
+        //} else {
+            //db<Thread>(WRN) << "Halting the CPU ..." << endl;
+            //CPU::halt();
+        //}
+    //}

     unlock();
 }
@@ -206,6 +287,8 @@

 void Thread::time_slicer(const IC::Interrupt_Id & i)
 {
+    db<Thread>(TRC) << "Thread::time_slicer()" << endl;
+
     reschedule();
 }

@@ -230,17 +313,37 @@

 int Thread::idle()
 {
-    db<Thread>(TRC) << "Thread::idle()" << endl;
+    //db<Thread>(TRC) << "Thread::idle()" << endl;

-    db<Thread>(INF) << "There are no runnable threads at the moment!" << endl;
-    db<Thread>(INF) << "Halting the CPU ..." << endl;
+    //db<Thread>(INF) << "There are no runnable threads at the moment!" << endl;
+    //db<Thread>(INF) << "Halting the CPU ..." << endl;

-    CPU::int_enable();
-    CPU::halt();
+    //CPU::int_enable();
+    //CPU::halt();

+    while(_thread_count > 1) {
+        db<Thread>(TRC) << "Thread::idle(thread_count=" << _thread_count << ")" << endl;
+
+        db<Thread>(INF) << "There are no runnable threads at the moment!" << endl;
+        db<Thread>(INF) << "Halting the CPU ..." << endl;
+
+        CPU::int_enable();
+        CPU::halt();
+    }
+
+    db<Thread>(WRN) << "The last thread in the system has exited!" << endl;
+    if(reboot) {
+        db<Thread>(WRN) << "Rebooting the machine ..." << endl;
+        Machine::reboot();
+    } else {
+        db<Thread>(WRN) << "Halting the CPU ..." << endl;
+        CPU::halt();
+    }
+
     return 0;
 }

+
 __END_SYS

 // Id forwarder to the spin lock
Index: src/abstraction/thread_init.cc
===================================================================
--- src/abstraction/thread_init.cc	(revision 3712)
+++ src/abstraction/thread_init.cc	(working copy)
@@ -15,8 +15,20 @@
     // Letting reschedule() happen during thread creation is harmless, since
     // MAIN is created first and dispatch won't replace it nor by itself
     // neither by IDLE (which has a lower priority)
-    if(preemptive)
+
+    db<Init, Thread>(TRC) << "Thread::init()" << endl;
+
+    if(preemptive) {
         _timer = new (kmalloc(sizeof(Scheduler_Timer))) Scheduler_Timer(QUANTUM, time_slicer);
+        _timer->disable();
+    }
 }

+
+void Thread::init_idle()
+{
+    db<Init, Thread>(TRC) << "Thread::init_idle()" << endl;
+    new (kmalloc(sizeof(Thread))) Thread(Configuration(READY, IDLE), idle);
+}
+
 __END_SYS
Index: src/init/init_first.cc
===================================================================
--- src/init/init_first.cc	(revision 3712)
+++ src/init/init_first.cc	(working copy)
@@ -3,6 +3,7 @@
 #include <utility/heap.h>
 #include <system/kmalloc.h>
 #include <thread.h>
+#include <alarm.h>

 extern "C" { void __epos_app_entry(); }

@@ -32,6 +33,10 @@

         db<Init>(INF) << "done!" << endl;

+        db<Init>(INF) << "Initializing the idle thread: " << endl;
+        Thread::init_idle();
+        db<Init>(INF) << "done!" << endl;
+
         db<Init>(INF) << "INIT ends here!" << endl;

         db<Init, Thread>(INF) << "Dispatching the first thread: " << Thread::running() << endl;
@@ -38,6 +43,9 @@

         This_Thread::not_booting();

+        if (Thread::preemptive)
+            Thread::_timer->enable();
+
         Thread::running()->_context->load();
     }
 };
